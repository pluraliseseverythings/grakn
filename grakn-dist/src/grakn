#!/bin/bash

# TODO:
# - grakn cluster join should be commutative
# - seed should be dynamically decided by grakn algorithm
# - if we change cluster configuration such as IP, should we clean some data first?

#
# Grakn - A Distributed Semantic Database
# Copyright (C) 2016  Grakn Labs Limited
#
# Grakn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Grakn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# <http://www.gnu.org/licenses/gpl.txt>.

# ================================================
# grakn
# this script is divided into several major parts
# global variables
# common helper functions
# storage component helper functions - storage_*
# queue component helper functions - queue_*
# grakn helper functions - grakn_*
# command line helpers - cli_*
# ================================================

# ================================================
# global variables
# ================================================

# globals
WAIT_INTERVAL_S=2

# Grakn globals
# TODO: clean up
if [ -z "${GRAKN_HOME}" ]; then
    [[ $(readlink $0) ]] && path=$(readlink $0) || path=$0
    GRAKN_HOME=$(cd "$(dirname "${path}")" && pwd -P)
    GRAKN_CONFIG="${GRAKN_HOME}/conf/grakn.properties"
    GRAKN_PID=/tmp/grakn.pid
    GRAKN_STARTUP_TIMEOUT_S=120
fi

# Storage globals
STORAGE_PID=/tmp/grakn-storage.pid
STORAGE_STARTUP_TIMEOUT_S=60

# Queue globals
QUEUE_STARTUP_TIMEOUT_S=10

# ================================================
# common helper functions
# ================================================
update_classpath_global_var() {
  # Define CLASSPATH, exclude slf4j as we use logback
  for jar in "${GRAKN_HOME}"/services/lib/*.jar; do
      if [[ $jar != *slf4j-log4j12* ]] ; then
          CLASSPATH="$CLASSPATH":"$jar"
      fi
  done

  # Add path containing grakn.properties and logback.xml
  CLASSPATH="$CLASSPATH":"${GRAKN_HOME}"/conf
  CLASSPATH="$CLASSPATH":"${GRAKN_HOME}"/services/grakn
}

# ================================================
# storage helper functions
# ================================================
storage_start_process() {
  "${GRAKN_HOME}"/services/cassandra/cassandra -p $STORAGE_PID > /dev/null 2>&1
  return $?
}

storage_check_if_running() {
  local status=
  if [ -e $STORAGE_PID ] && ps -p `cat $STORAGE_PID` > /dev/null ; then
    status=0 # storage running
  else
    status=1 # storage not running
  fi
  return $status
}

storage_wait_until_ready() {
  local now_s=`date '+%s'`
  local stop_s=$(( $now_s + $STORAGE_STARTUP_TIMEOUT_S ))
  local status_thrift=

  while [ $now_s -le $stop_s ]; do
      echo -n "."
      # The \r\n deletion bit is necessary for Cygwin compatibility
      status_thrift=`"${GRAKN_HOME}"/services/cassandra/nodetool statusthrift 2>/dev/null | tr -d '\n\r'`
      if [ $? -eq 0 -a 'running' = "$status_thrift" ]; then
          return 0
      fi
      sleep $WAIT_INTERVAL_S
      now_s=`date '+%s'`
  done

  return 1
}

storage_start_and_wait_until_ready() {
  storage_check_if_running
  is_storage_running=$?

  if [ $is_storage_running -eq 0 ]; then
    echo "Storage is already running"
    return 0 # storage is already running. no need to do anything
  else
    # otherwise attempt to start
    echo -n "Starting Storage..."
    storage_start_process
    local exec_storage_bin=$?

    # check storage status and wait until ready
    local status=
    if [ $exec_storage_bin -eq 0 ] ; then
      # exec storage bin successful. now wait until ready
      storage_wait_until_ready
      status=$?
    else
      # exec storage bin failed
      status=1
    fi

    if [ $status -eq 0 ]; then
      echo "SUCCESS"
    else
      echo "FAILED!"
    fi

    return $status
  fi
}

storage_stop_process() {
  echo -n "Stopping Storage..."
  storage_check_if_running
  local is_storage_running=$?
  if [[ $is_storage_running -eq 0 ]]; then
    if [[ -e $STORAGE_PID ]]; then
      pid=`cat $STORAGE_PID`
      kill "$pid"
      while kill -0 "$pid" 2>/dev/null; do
          sleep 0.5
      done
      echo "SUCCESS"
      return 0
    else
      echo "FAILED!" # unable to find PID
      return 1
    fi
  else
    echo "NOT RUNNING"
  fi
}

storage_wipe_all_data() {
  rm -rf db/cassandra
  mkdir -p db/cassandra/data db/cassandra/commitlog db/cassandra/saved_caches
}

# ================================================
# queue helper functions
# ================================================
queue_start_process_as_slave() {
  local master_host=`cat "${GRAKN_HOME}/services/redis/redis.slave.setting" | grep master_host | awk -F ':' '{print $2}'`
  local master_port=`cat "${GRAKN_HOME}/services/redis/redis.slave.setting" | grep master_host | awk -F ':' '{print $3}'`
  local listen_host=`cat "${GRAKN_HOME}/services/redis/redis.slave.setting" | grep listen_host | awk -F ':' '{print $2}'`
  local listen_port=`cat "${GRAKN_HOME}/services/redis/redis.slave.setting" | grep listen_host | awk -F ':' '{print $3}'`

  echo "${GRAKN_HOME}"/services/redis/$queue_bin "${GRAKN_HOME}"/services/redis/redis.conf \
    --slaveof $master_host $master_port --bind $listen_host --port $listen_port

  "${GRAKN_HOME}"/services/redis/$queue_bin "${GRAKN_HOME}"/services/redis/redis.conf \
    --slaveof $master_host $master_port --bind $listen_host --port $listen_port

  return $?
}

queue_start_process_default_settings() {
  "${GRAKN_HOME}"/services/redis/$queue_bin "${GRAKN_HOME}"/services/redis/redis.conf

  return $?
}

queue_start_process() {
  local queue_bin=""
  if [ "$(uname)" == "Darwin" ]; then
      queue_bin="redis-server-osx"
  elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
      queue_bin="redis-server-linux"
  fi

  # run queue
  # queue needs to be ran with $GRAKN_HOME as the working directory
  # otherwise it won't be able to find its data directory located at $GRAKN_HOME/db/redis
  pushd "$GRAKN_HOME" > /dev/null

  local redis_slave_settings_file="${GRAKN_HOME}/services/redis/redis.slave.setting"

  if [ ! -f $redis_slave_settings_file ]; then
    echo "master "
    queue_start_process_default_settings
  else
    echo "slave of "
    queue_start_process_as_slave
  fi

  local status=$?
  popd > /dev/null

  return $status
}

queue_check_if_running() {
  local status=
  local count_running_queue_process=`ps -ef | grep 'redis-server' | grep -v grep | awk '{ print $2}' | wc -l`
  if [ $count_running_queue_process -gt 0 ] ; then
    status=0 # queue running
  else
    status=1 # queue not running
  fi
  return $status
}

queue_wait_until_ready() {
  local now_s=`date '+%s'`
  local stop_s=$(( $now_s + $QUEUE_STARTUP_TIMEOUT_S ))

  while [ $now_s -le $stop_s ]; do
      echo -n "." # output some sort of "progress bar"
      queue_check_if_running
      local is_queue_running=$?
      if [ $is_queue_running -eq 0 ] ; then
          return 0
      fi
      sleep $WAIT_INTERVAL_S
      now_s=`date '+%s'`
  done

  return 1
}

queue_start_and_wait_until_ready() {
  queue_check_if_running
  is_queue_running=$?

  if [ $is_queue_running -eq 0 ]; then
    echo "Queue is already running"
    return 0 # queue is already running. no need to do anything
  else
    # otherwise attempt to start
    echo -n "Starting Queue..."
    queue_start_process
    local exec_queue_bin=$?

    # check queue status and wait until ready
    local status=
    if [ $exec_queue_bin -eq 0 ] ; then
      # exec queue bin successful. now wait until ready
      queue_wait_until_ready
      status=$?
      echo "SUCCESS"
    else
      # exec queue bin failed
      status=1
      echo "FAILED!"
    fi

    return $status
  fi
}

queue_stop_process() {
  echo -n "Stopping Queue..."
  queue_check_if_running
  local is_queue_running=$?
  if [[ $is_queue_running -eq 0 ]]; then
    local queue_bin=
    if [ "$(uname)" == "Darwin" ]; then
        queue_bin="redis-cli-osx"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        queue_bin="redis-cli-linux"
    fi
    "${GRAKN_HOME}/services/redis/"$queue_bin shutdown
    local status=$?
    if [ $status -eq 0 ] ; then
      echo "SUCCESS"
    else
      echo "FAILED!"
    fi
  else
    echo "NOT RUNNING"
  fi

  return $status
}

queue_wipe_all_data() {
  local queue_bin=
  if [ "$(uname)" == "Darwin" ]; then
      queue_bin="redis-cli-osx"
  elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
      queue_bin="redis-cli-linux"
  fi

  "${GRAKN_HOME}/services/redis/"$queue_bin flushall
}

# ================================================
# grakn helper functions
# ================================================
grakn_start_process() {
  local status=
  java -cp "${CLASSPATH}" -Dgrakn.dir="${GRAKN_HOME}/services" -Dgrakn.conf="${GRAKN_CONFIG}" \
    ai.grakn.engine.Grakn > /dev/null 2>&1 &
  status=$?
  pid=`ps -ef | grep Grakn | grep -v grep | awk '{ print $2}'`
  echo $pid > "${GRAKN_PID}"
  return $status
}

grakn_check_if_running() {
  if [ -e "$GRAKN_PID" ] && ps -p `cat $GRAKN_PID` > /dev/null ; then
    return 0
  else
    return 1
  fi
}

grakn_check_if_ready() {
  local host=`cat "${GRAKN_HOME}"/conf/grakn.properties| grep server.host | awk -F "=" '{print $2}'`
  local port=`cat "${GRAKN_HOME}"/conf/grakn.properties| grep server.port | awk -F "=" '{print $2}'`
  curl $host:$port/configuration > /dev/null 2>&1
  return $?
}

grakn_wait_until_ready() {
  local now_s=`date '+%s'`
  local stop_s=$(( $now_s + $GRAKN_STARTUP_TIMEOUT_S ))

  while [ $now_s -le $stop_s ]; do
      echo -n "." # output some sort of "progress bar"
      grakn_check_if_ready
      local is_grakn_running=$?
      if [ $is_grakn_running -eq 0 ] ; then
          return 0
      fi
      sleep $WAIT_INTERVAL_S
      now_s=`date '+%s'`
  done

  return 1
}

grakn_start_and_wait_until_ready() {
  grakn_check_if_running
  is_grakn_running=$?

  if [ $is_grakn_running -eq 0 ]; then
    echo "Grakn is already running"
    return 0 # grakn is already running. no need to do anything
  else
    # otherwise attempt to start
    echo -n "Starting Grakn..."
    grakn_start_process
    local exec_grakn_bin=$?

    # check grakn status and wait until ready
    local status=
    if [ $exec_grakn_bin -eq 0 ] ; then
      # exec grakn bin successful. now wait until ready
      grakn_wait_until_ready
      status=$?
      echo "SUCCESS"
    else
      # exec grakn bin failed
      status=1
      echo "FAILED!"
    fi

    return $status
  fi
}

grakn_stop_process() {
  echo -n "Stopping Grakn..."
  grakn_check_if_running
  local is_grakn_running=$?
  if [[ $is_grakn_running -eq 0 ]]; then
    if [[ -e "$GRAKN_PID" ]]; then
      kill `cat $GRAKN_PID`
      status_kill=$?
      rm $GRAKN_PID
      if [ $status_kill -eq 0 ] ; then
        echo "SUCCESS"
      else
        echo "FAILED!" # unable to kill
      fi
      return $status_kill
    else
      echo "FAILED!" # unable to find PID file
      return 1
    fi
  else
    echo "NOT RUNNING"
  fi
}

grakn_wipe_all_data() {
  rm -r "${GRAKN_HOME}"/logs
  mkdir "${GRAKN_HOME}"/logs
}

# ================================================
# command line case statement helpers
# ================================================
cli_case_grakn_server_stop_all() {
  grakn_stop_process
  status_grakn=$?

  queue_stop_process
  status_queue=$?

  storage_stop_process
  status_storage=$?

  if [ $status_grakn -eq 0 ] && [ $status_queue -eq 0 ] && [ $status_storage -eq 0 ] ; then
    return 0
  else
    return 1
  fi
}

# attempt to start grakn components. if one of them fails, abort everthing
cli_case_grakn_server_start_grakn() {
  grakn_start_and_wait_until_ready
  grakn=$?
  # log
  if [ $grakn -ne 0 ] ; then
    echo "Unable to start Grakn"
  fi
  return $grakn
}

cli_case_grakn_server_start_queue() {
  queue_start_and_wait_until_ready
  queue=$?
  # log
  if [ $queue -ne 0 ] ; then
    echo "Unable to start Queue"
  fi
  return $queue
}

cli_case_grakn_server_start_storage() {
  storage_start_and_wait_until_ready
  storage=$?
  # log
  if [ $storage -ne 0 ] ; then
    echo "Unable to start Storage"
  fi
  return $storage
}

cli_case_grakn_server_start_all() {
  cli_case_grakn_server_start_storage
  local storage=$?

  cli_case_grakn_server_start_queue
  local queue=$?

  cli_case_grakn_server_start_grakn
  local grakn=$?

  local status=
  if [ $storage -ne 0 ] || [ $queue -ne 0 ] || [ $grakn -ne 0 ]; then
    status=1
  else
    status=0
  fi

  return $status
}

cli_case_grakn_server_help() {
  echo "Usage: grakn server COMMAND

COMMAND:
start [grakn|queue|storage]  Start Grakn (or optionally, only one of the component)
stop [grakn|queue|storage]   Stop Grakn (or optionally, only one of the component)
status                         Check if Grakn is running
clean                          DANGEROUS: wipe data completely

Tips:
- Start Grakn with 'grakn server start'
- Start or stop only one component with, e.g. 'grakn server start storage' or 'grakn server stop storage', respectively
"
}
cli_case_grakn_server_status() {
  storage_check_if_running
  if [ $? -eq 0 ] ; then
    echo "Storage: RUNNING"
  else
    echo "Storage: NOT RUNNING"
  fi

  queue_check_if_running
  if [ $? -eq 0 ] ; then
    echo "Queue: RUNNING"
  else
    echo "Queue: NOT RUNNING"
  fi

  grakn_check_if_ready
  if [ $? -eq 0 ] ; then
    echo "Grakn: RUNNING"
  else
    echo "Grakn: NOT RUNNING"
  fi
}

cli_case_grakn_server_clean() {
  storage_check_if_running
  local is_storage_running=$?

  queue_check_if_running
  local is_queue_running=$?

  grakn_check_if_ready
  local is_grakn_running=$?

  if [ $is_storage_running -eq 0 ] || [ $is_queue_running -eq 0 ] || [ $is_grakn_running -eq 0 ] ; then
    echo "Grakn is still running! Please do a shutdown with 'grakn server stop' before performing a cleanup."
  else
    echo -n "Are you sure you want to delete all stored data and logs? [y/N] " >&2
    read response
    if [ "$response" != "y" -a "$response" != "Y" ]; then
        echo "Response \"$response\" did not equal \"y\" or \"Y\".  Canceling clean operation." >&2
        return 0
    fi

    echo -n "Cleaning Storage..."
    storage_wipe_all_data
    echo "SUCCESS"

    queue_start_and_wait_until_ready
    queue_wipe_all_data
    queue_stop_process
    echo "Cleaning Queue...SUCCESS"

    echo -n "Cleaning Grakn..."
    grakn_wipe_all_data
    echo "SUCCESS"
  fi
}

cli_case_grakn_cluster_join() {
  local yaml_jar="${GRAKN_HOME}/services/grakn/yaml-reader-1.0.jar"
  local yaml_main_class="com.lolski.Main"
  local yaml_field_cluster_name="\"Grakn Example Cluster\"" # TODO: generate randomly
  local yaml_field_seeds="$1"
  local yaml_field_listen_addr="$2"
  local yaml_field_rpc_addr="$2"
  local original_conf="services/cassandra/cassandra.yaml"
  local updated_conf="services/cassandra/cassandra.yaml"
  local redis_slave_settings_file="services/redis/redis.slave.setting"

  echo java -cp "$yaml_jar" "$yaml_main_class" \
    "$yaml_field_cluster_name" "$yaml_field_seeds" "$yaml_field_listen_addr" "$yaml_field_rpc_addr" \
    "$original_conf" "$updated_conf"

  # change redis settings
  echo "master_host:$1" > $redis_slave_settings_file
  echo "listen_host:$2" >> $redis_slave_settings_file

  # change cassandra settings
  java -cp "$yaml_jar" "$yaml_main_class" \
    "$yaml_field_cluster_name" "$yaml_field_seeds" "$yaml_field_listen_addr" "$yaml_field_rpc_addr" \
    "$original_conf" "$updated_conf"
}

cli_case_grakn_cluster_leave() {
  "${GRAKN_HOME}/services/cassandra/nodetool" decommission
}

cli_case_grakn_cluster_status() {
  "${GRAKN_HOME}/services/cassandra/nodetool" status
}

cli_case_grakn_version() {
  java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.graql.GraqlShell --version
}

cli_case_grakn_help() {
  echo "Usage: grakn COMMAND

COMMAND:
server     Manage Grakn
cluster    Manage Grakn cluster
version    Print Grakn version
help       Print this message

Tips:
- Start Grakn with 'grakn server start' (by default, the dashboard will be accessible at http://localhost:4567)
- You can then perform queries by opening a console with 'graql console'"
}

cli_case_grakn_server_start() {
  # attempt to start. check if there's any failure
  # abort and terminate if so
  status=
  case "$1" in
    grakn)
      cli_case_grakn_server_start_grakn
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to start Grakn. Please run 'grakn server status' or check the logs located under 'logs' directory."
        exit 1
      fi
    ;;
    queue)
      cli_case_grakn_server_start_queue
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to start Queue. Please run 'grakn server status' or check the logs located under 'logs' directory."
        exit 1
      fi
    ;;
    storage)
      cli_case_grakn_server_start_storage
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to start Storage. Please run 'grakn server status' or check the logs located under 'logs' directory."
        exit 1
      fi
    ;;
    *)
      cli_case_grakn_server_start_all
      status=$?
      if [ $status -eq 0 ] ; then
        # do nothing
        exit 0
      else
        # failure detected. attempt to terminate every component gracefully
        echo "Unable to start Grakn. Please run 'grakn server status' or check the logs located under 'logs' directory."
        exit 1
      fi
    ;;
  esac
}

cli_case_grakn_server_stop() {
  # TODO: handle if graceful termination failed and log failures
  case $1 in
    grakn)
      grakn_stop_process
    ;;
    queue)
      queue_stop_process
    ;;
    storage)
      storage_stop_process
    ;;
    *)
      cli_case_grakn_server_stop_all
    ;;
  esac
}

# =============================================
# CTRL+C handler
# =============================================
handle_ctrl_c() {
  echo
  echo "*** Receiving SIGINT. Halting ***"
  cli_case_grakn_server_stop
  exit 1
}

# =============================================
# misc helper methods
# =============================================
print_grakn_logo() {
  # cat ASCII logo, or fail silently if it's somehow missing
  cat "${GRAKN_HOME}"/services/grakn/grakn-ascii.txt 2> /dev/null
}

# =============================================
# main routine
# =============================================

update_classpath_global_var

# temporarily disabling trap as it's probably not needed
# trap handle_ctrl_c INT # run handle_ctrl_c when receiving CTRL+C

print_grakn_logo

case "$1" in
  server)
    case "$2" in
      start)
        cli_case_grakn_server_start $3
      ;;
      stop)
        cli_case_grakn_server_stop $3
      ;;
      status)
        cli_case_grakn_server_status
      ;;
      clean)
        cli_case_grakn_server_clean
      ;;
      help|*)
        cli_case_grakn_server_help
      ;;
    esac
  ;;
  cluster)
    case "$2" in
      configure)
        cli_case_grakn_cluster_join $3 $4
      ;;
      leave)
        cli_case_grakn_cluster_leave $3
      ;;
      status)
        cli_case_grakn_cluster_status
      ;;
    esac
  ;;
  version)
    cli_case_grakn_version
  ;;
  *|help)
    cli_case_grakn_help
  ;;
esac

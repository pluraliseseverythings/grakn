#!/bin/bash

#
# Grakn - A Distributed Semantic Database
# Copyright (C) 2016  Grakn Labs Limited
#
# Grakn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Grakn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# <http://www.gnu.org/licenses/gpl.txt>.

# ================================================
# global variables
# ================================================

# Grakn globals
# TODO: clean up
if [ -z "${GRAKN_HOME}" ]; then
    [[ $(readlink $0) ]] && path=$(readlink $0) || path=$0
    GRAKN_HOME=$(cd "$(dirname "${path}")" && pwd -P)
    GRAKN_CONFIG="${GRAKN_HOME}/conf/grakn.properties"
    GRAKN_PS=/tmp/grakn-engine.pid
    GRAKN_STARTUP_TIMEOUT_S=120
fi

# ================================================
# common helper functions
# ================================================
update_classpath() {
  # Define CLASSPATH, exclude slf4j as we use logback
  for jar in "${GRAKN_HOME}"/services/lib/*.jar; do
      if [[ $jar != *slf4j-log4j12* ]] ; then
          CLASSPATH="$CLASSPATH":"$jar"
      fi
  done

  # Add path containing grakn.properties and logback.xml
  CLASSPATH="$CLASSPATH":"${GRAKN_HOME}"/conf
  CLASSPATH="$CLASSPATH":"${GRAKN_HOME}"/services/grakn
}

graql_console() {
  java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.graql.GraqlShell "${@:1}"
}

grakn_version() {
  java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.graql.GraqlShell --version
}
graql_help() {
  echo "Usage: graql COMMAND

COMMAND:
console  Start a REPL console for running Graql queries. Defaults to connecting to http://localhost
migrate  Run migration from a file
version  Print Grakn version
help     Print this message"
}

# =============================================
# main routine
# =============================================

update_classpath

case "$1" in
  console)
    graql_console "${@:2}"
  ;;
  migrate)
    if [ "$2" == "csv" ] ; then
      java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.migration.csv.CSVMigrator "${@:2}"
    elif [ "$2" == "json" ] ; then
      java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.migration.json.JsonMigrator "${@:2}"
    elif [ "$2" == "owl" ] ; then
      java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.migration.owl.Main "${@:2}"
    elif [ "$2" == "export" ] ; then
      java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.migration.export.Main "${@:2}"
    elif [ "$2" == "sql" ] ; then
      java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.migration.sql.SQLMigrator "${@:2}"
    elif [ "$2" == "xml" ] ; then
      java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.migration.xml.XmlMigrator "${@:2}"
    else
      java -cp ${CLASSPATH} -Dgrakn.dir="${GRAKN_HOME}/services" ai.grakn.migration.xml.XmlMigrator -h
    fi
  ;;
  version)
    grakn_version
  ;;
  *|help)
    graql_help
  ;;
esac

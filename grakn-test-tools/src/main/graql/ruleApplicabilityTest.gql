define

#Roles

# Role hierarchy
#
#              role
#            /      \
#        role1      role3
#          |
#        role2
#          |
#     symmetricRole
#

role1 sub role;
role2 sub role1;
symmetricRole sub role2;
role3 sub role;

#Entities

# Entity hierarchy
#
#                                       entity
#                                          |
#                                    noRoleEntity                                                               anotherNoRoleEntity
#                                          |
#  singleRoleEntity(R1)    anotherSingleRoleEntity(R1)   twoRoleEntity(R2, R3)   threeRoleEntity (R1, R2, R3)
#                               |
#                           anotherTwoRoleEntity(R2)
#                               |
#                           anotherThreeRoleEntity(R3)

noRoleEntity sub entity
    has name;

anotherNoRoleEntity sub entity
    has name;

singleRoleEntity sub noRoleEntity
	plays role1;

anotherSingleRoleEntity sub noRoleEntity
    plays role1;

anotherTwoRoleEntity sub anotherSingleRoleEntity
    plays role2
    plays symmetricRole;

anotherThreeRoleEntity sub anotherTwoRoleEntity
    plays role3;

twoRoleEntity sub noRoleEntity
    plays role2
    plays role3;

threeRoleEntity sub noRoleEntity
    plays role1
    plays role2
    plays role3;


#Relations

ternary sub relationship
	relates role1
	relates role2
	relates role3;

binary sub relationship
    relates role1
    relates role2;

reified-relation sub relationship
    relates role1
    relates role2
    plays role1
    plays role2
    has description;

reifying-relation sub relationship
    relates role1
    relates role2
    relates symmetricRole;

typed-relation sub relationship
    relates role1
    relates role2
    relates role3
    has description;

#Resources
   name sub attribute datatype string;
   description sub attribute datatype string;

#Rules

rule-0 sub rule
	when {
		(role1: $x, role2: $y) isa binary;
		(role1: $y, role2: $z) isa binary;
	}
	then {
		(role1: $x, role2: $z) isa binary;
	};

rule-1 sub rule
	when {
		(role1: $x, role2: $y) isa binary;
		(role1: $y, role2: $z) isa binary;
	}
	then {
		(role1:$x, role2:$y, role3: $z) isa ternary;
	};

rule-2 sub rule
	when {
		(role1: $x, role2: $y) isa binary;
		(role1: $y, role2: $z) isa binary;
	}
	then {
		(role1:$x, role2:$y, role2: $z) isa ternary;
	};

rule-3 sub rule
    when {
    	$r1 (role1: $x, role2: $y) isa reified-relation;
    	$r2 (role1: $y, role2: $z) isa reified-relation;
    }
    then {
    	(role1:$r1, role2:$r2) isa reifying-relation;
    };

rule-4 sub rule
    when {
    	$x isa anotherTwoRoleEntity;
    	$y isa anotherTwoRoleEntity;
    }
    then {
    	(symmetricRole:$x, symmetricRole:$y) isa reifying-relation;
    };

rule-5 sub rule
    when {
    	$x isa singleRoleEntity;
    	$y isa anotherTwoRoleEntity;
    	$z isa twoRoleEntity;
    }
    then {
    	(role1:$x, role2:$y, role3: $z) isa typed-relation;
    };

resource-rule sub rule
    when {
        $r1 (role1: $x, role2: $y) isa reified-relation;
    }
    then {
        $r1 has description 'reified';
    };

resource-rule2 sub rule
    when {
        $r1 (role1:$x, role2:$y, role3: $z) isa typed-relation;
    }
    then {
        $r1 has description 'reified';
    };

resource-rule3 sub rule
    when {
        $r has description 'typed';
        $r has description 'reified';
    }
    then {
        $r has description 'typed-reified';
    };

insert

#Data

$x isa anotherNoRoleEntity, has name 'noRoleEntity';